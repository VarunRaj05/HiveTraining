# Module 6 Manipulating Data

-- Math Functions

-- basic calculations using mathmatical operators
select
    orderid,
    orderdate,
    quantity,
    rate,
    discountpct,
    quantity*rate*(1-discountpct) as QuoteAmt,
    round(quantity*rate*(1-discountpct)) as QuoteAmtRound
from sales_all_years
where yr=2009

-- use rand and others to simulate new data
select 
    rand(), 
    saleamount,
    orderid,
    wagemargin,
    round(saleamount*rand()) as RandSaleAmount,
    floor(wagemargin) as WageMarginFlr,
    ceiling(wagemargin) as WageMarginCl
from sales_all_years
where yr=2009

-- String Functions

-- build customer key
select 
    lower(name), 
    regexp_replace(name, '[^a-zA-Z0-9]+', ''),
    lower(regexp_replace(name, '[^a-zA-Z0-9]+', '')) as CustKey
from clients

-- parse out the quote from the url
select 
    name, 
    summaryquote, 
    parse_url(summaryquote,'PATH'),
    locate('/',parse_url(summaryquote,'PATH'),2),
    substring(parse_url(summaryquote,'PATH'),9,4),
    substring(
        parse_url(summaryquote,'PATH'),
        locate('/',parse_url(summaryquote,'PATH'),2)+1
        ,4
    ) as symbol
from clients

-- combine the two for a new customer key
select 
    name, 
    concat(
        lower(regexp_replace(name, '[^a-zA-Z0-9]+', '')),
        '-',
        substring(parse_url(summaryquote,'PATH'),9,4)
    ) as CustKey
from clients

-- Date Functions

-- find difference between two dates
select
    orderid,
    productcategory,
    productsubcategory,
    orderdate,
    projectcompletedate,
    datediff(projectcompletedate, orderdate) duration
from sales_all_years

-- get some stats by month
select
    productcategory,
    productsubcategory,
    year(orderdate) y,
    month(orderdate) m,
    avg(datediff(projectcompletedate, orderdate)) duration
from sales_all_years
group by    
    productcategory,
    productsubcategory,
    year(orderdate),
    month(orderdate)
order by
    3,4

-- find the last day of the month
select distinct
    date_sub(
        to_date(
            concat(cast(year(orderdate) as string),"-",cast(month(orderdate)+1 as string),"-01")
        )
    ,1 ),
    orderdate
from sales_all_years
limit 100;


-- Conditional

-- identify large sales with IF
select 
    orderid,
    saleamount,
    if(saleamount > 5000, 1, 0) as LargeSale
from sales_all_years
limit 1000;

-- create sales size categories
select 
    orderid,
    saleamount,
    case 
        when saleamount > 5000 then 'large'
        when saleamount > 1000 then 'medium'
        else 'small'
    end as SalesSize
from sales_all_years
limit 1000;

-- Ex: Conditional
select 
    case lower(region)
        when 'west' then 'Southwest'
        when 'south' then 'Southwest'
        else region
    end as new_region,
    year(orderdate) as y,
    sum(saleamount) as TotalSales
from sales_all_years
group by
    case lower(region)
        when 'west' then 'Southwest'
        when 'south' then 'Southwest'
        else region
    end,
    year(orderdate)
limit 100;